/**
 * Indexer Marketplace APIs
 * This API implements endpoints to power data driven marketplace and game experiences
 *
 * OpenAPI spec version: 1.0
 * Contact: helpmebuild@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPINFTMetadataAttribute.h"

#include "ImmutableIndexerSearchAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutableIndexerSearchAPI
{

inline FString ToString(const OpenAPINFTMetadataAttribute::DisplayTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPINFTMetadataAttribute::DisplayTypeEnum::Number:
		return TEXT("number");
	case OpenAPINFTMetadataAttribute::DisplayTypeEnum::BoostPercentage:
		return TEXT("boost_percentage");
	case OpenAPINFTMetadataAttribute::DisplayTypeEnum::BoostNumber:
		return TEXT("boost_number");
	case OpenAPINFTMetadataAttribute::DisplayTypeEnum::Date:
		return TEXT("date");
	}

	UE_LOG(LogImmutableIndexerSearchAPI, Error, TEXT("Invalid OpenAPINFTMetadataAttribute::DisplayTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPINFTMetadataAttribute::EnumToString(const OpenAPINFTMetadataAttribute::DisplayTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPINFTMetadataAttribute::DisplayTypeEnum& Value)
{
	static TMap<FString, OpenAPINFTMetadataAttribute::DisplayTypeEnum> StringToEnum = { 
		{ TEXT("number"), OpenAPINFTMetadataAttribute::DisplayTypeEnum::Number },
		{ TEXT("boost_percentage"), OpenAPINFTMetadataAttribute::DisplayTypeEnum::BoostPercentage },
		{ TEXT("boost_number"), OpenAPINFTMetadataAttribute::DisplayTypeEnum::BoostNumber },
		{ TEXT("date"), OpenAPINFTMetadataAttribute::DisplayTypeEnum::Date }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPINFTMetadataAttribute::EnumFromString(const FString& EnumAsString, OpenAPINFTMetadataAttribute::DisplayTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPINFTMetadataAttribute::DisplayTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPINFTMetadataAttribute::DisplayTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPINFTMetadataAttribute::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (DisplayType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("display_type")); WriteJsonValue(Writer, DisplayType.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("trait_type")); WriteJsonValue(Writer, TraitType);
	Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value);
	Writer->WriteObjectEnd();
}

bool OpenAPINFTMetadataAttribute::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("display_type"), DisplayType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("trait_type"), TraitType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);

	return ParseSuccess;
}

}
