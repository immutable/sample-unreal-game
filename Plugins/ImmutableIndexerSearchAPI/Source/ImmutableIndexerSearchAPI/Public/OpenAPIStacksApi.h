/**
 * Indexer Marketplace APIs
 * This API implements endpoints to power data driven marketplace and game experiences
 *
 * OpenAPI spec version: 1.0
 * Contact: helpmebuild@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "OpenAPIBaseModel.h"

namespace ImmutableIndexerSearchAPI
{

class IMMUTABLEINDEXERSEARCHAPI_API OpenAPIStacksApi
{
public:
	OpenAPIStacksApi();
	~OpenAPIStacksApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class BackfillRequest;
	class BackfillResponse;
	class SearchNFTsRequest;
	class SearchNFTsResponse;
	class SearchStacksRequest;
	class SearchStacksResponse;
	
    DECLARE_DELEGATE_OneParam(FBackfillDelegate, const BackfillResponse&);
    DECLARE_DELEGATE_OneParam(FSearchNFTsDelegate, const SearchNFTsResponse&);
    DECLARE_DELEGATE_OneParam(FSearchStacksDelegate, const SearchStacksResponse&);
    
    FHttpRequestPtr Backfill(const BackfillRequest& Request, const FBackfillDelegate& Delegate = FBackfillDelegate()) const;
    FHttpRequestPtr SearchNFTs(const SearchNFTsRequest& Request, const FSearchNFTsDelegate& Delegate = FSearchNFTsDelegate()) const;
    FHttpRequestPtr SearchStacks(const SearchStacksRequest& Request, const FSearchStacksDelegate& Delegate = FSearchStacksDelegate()) const;
    
private:
    void OnBackfillResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FBackfillDelegate Delegate) const;
    void OnSearchNFTsResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSearchNFTsDelegate Delegate) const;
    void OnSearchStacksResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FSearchStacksDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
