/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOperatorAllowlistStatus.h"

#include "ImmutableOpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutableOpenAPI
{

inline FString ToString(const OpenAPIOperatorAllowlistStatus::Values& Value)
{
	switch (Value)
	{
	case OpenAPIOperatorAllowlistStatus::Values::Requested:
		return TEXT("requested");
	case OpenAPIOperatorAllowlistStatus::Values::Approved:
		return TEXT("approved");
	case OpenAPIOperatorAllowlistStatus::Values::Rejected:
		return TEXT("rejected");
	case OpenAPIOperatorAllowlistStatus::Values::Removed:
		return TEXT("removed");
	case OpenAPIOperatorAllowlistStatus::Values::Added:
		return TEXT("added");
	}

	UE_LOG(LogImmutableOpenAPI, Error, TEXT("Invalid OpenAPIOperatorAllowlistStatus::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOperatorAllowlistStatus::EnumToString(const OpenAPIOperatorAllowlistStatus::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOperatorAllowlistStatus::Values& Value)
{
	static TMap<FString, OpenAPIOperatorAllowlistStatus::Values> StringToEnum = { 
		{ TEXT("requested"), OpenAPIOperatorAllowlistStatus::Values::Requested },
		{ TEXT("approved"), OpenAPIOperatorAllowlistStatus::Values::Approved },
		{ TEXT("rejected"), OpenAPIOperatorAllowlistStatus::Values::Rejected },
		{ TEXT("removed"), OpenAPIOperatorAllowlistStatus::Values::Removed },
		{ TEXT("added"), OpenAPIOperatorAllowlistStatus::Values::Added }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOperatorAllowlistStatus::EnumFromString(const FString& EnumAsString, OpenAPIOperatorAllowlistStatus::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOperatorAllowlistStatus::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOperatorAllowlistStatus::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOperatorAllowlistStatus::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIOperatorAllowlistStatus::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
