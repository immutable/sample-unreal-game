/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIActivitiesApi.h"

#include "OpenAPIAPIError400.h"
#include "OpenAPIAPIError404.h"
#include "OpenAPIAPIError500.h"
#include "OpenAPIActivityType.h"
#include "OpenAPIGetActivityResult.h"
#include "OpenAPIListActivitiesResult.h"

namespace ImmutableOpenAPI
{

/* Get a single activity by ID
 *
 * Get a single activity by ID
*/
class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::GetActivityRequest : public Request
{
public:
    virtual ~GetActivityRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* The id of activity */
	FGuid ActivityId;
};

class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::GetActivityResponse : public Response
{
public:
    virtual ~GetActivityResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIGetActivityResult Content;
};

/* List all activities
 *
 * List all activities
*/
class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::ListActivitiesRequest : public Request
{
public:
    virtual ~ListActivitiesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* The contract address of NFT or ERC20 Token */
	TOptional<FString> ContractAddress;
	/* An `uint256` token id as string */
	TOptional<FString> TokenId;
	/* The account address activity contains */
	TOptional<FString> AccountAddress;
	/* The activity type */
	TOptional<OpenAPIActivityType> ActivityType;
	/* The transaction hash of activity */
	TOptional<FString> TransactionHash;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::ListActivitiesResponse : public Response
{
public:
    virtual ~ListActivitiesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListActivitiesResult Content;
};

/* List history of activities
 *
 * List activities sorted by updated_at timestamp ascending, useful for time based data replication
*/
class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::ListActivityHistoryRequest : public Request
{
public:
    virtual ~ListActivityHistoryRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* From indexed at including given date */
	FDateTime FromUpdatedAt;
	/* To indexed at including given date */
	TOptional<FDateTime> ToUpdatedAt;
	/* The contract address of the collection */
	TOptional<FString> ContractAddress;
	/* The activity type */
	TOptional<OpenAPIActivityType> ActivityType;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEOPENAPI_API OpenAPIActivitiesApi::ListActivityHistoryResponse : public Response
{
public:
    virtual ~ListActivityHistoryResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListActivitiesResult Content;
};

}
