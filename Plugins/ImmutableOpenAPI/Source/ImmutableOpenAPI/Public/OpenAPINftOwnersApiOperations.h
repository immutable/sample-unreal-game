/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPINftOwnersApi.h"

#include "OpenAPIAPIError400.h"
#include "OpenAPIAPIError404.h"
#include "OpenAPIAPIError500.h"
#include "OpenAPIListCollectionOwnersResult.h"
#include "OpenAPIListNFTOwnersResult.h"

namespace ImmutableOpenAPI
{

/* List all NFT owners
 *
 * List all NFT owners on a chain
*/
class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListAllNFTOwnersRequest : public Request
{
public:
    virtual ~ListAllNFTOwnersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The name of chain */
	FString ChainName;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListAllNFTOwnersResponse : public Response
{
public:
    virtual ~ListAllNFTOwnersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListNFTOwnersResult Content;
};

/* List NFT owners by token ID
 *
 * List NFT owners by token ID
*/
class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListNFTOwnersRequest : public Request
{
public:
    virtual ~ListNFTOwnersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of contract */
	FString ContractAddress;
	/* An `uint256` token id as string */
	FString TokenId;
	/* The name of chain */
	FString ChainName;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListNFTOwnersResponse : public Response
{
public:
    virtual ~ListNFTOwnersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListNFTOwnersResult Content;
};

/* List owners by contract address
 *
 * List owners by contract address
*/
class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListOwnersByContractAddressRequest : public Request
{
public:
    virtual ~ListOwnersByContractAddressRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* The address of contract */
	FString ContractAddress;
	/* The name of chain */
	FString ChainName;
	/* List of account addresses to filter by */
	TOptional<TArray<FString>> AccountAddress;
	/* Datetime to use as the oldest updated timestamp */
	TOptional<FDateTime> FromUpdatedAt;
	/* Encoded page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
	/* Maximum number of items to return */
	TOptional<int32> PageSize;
};

class IMMUTABLEOPENAPI_API OpenAPINftOwnersApi::ListOwnersByContractAddressResponse : public Response
{
public:
    virtual ~ListOwnersByContractAddressResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListCollectionOwnersResult Content;
};

}
