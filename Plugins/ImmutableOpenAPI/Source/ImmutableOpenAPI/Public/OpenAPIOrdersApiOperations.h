/**
 * Immutable zkEVM API
 * Immutable Multi Rollup API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIOrdersApi.h"

#include "OpenAPIAPIError400.h"
#include "OpenAPIAPIError401.h"
#include "OpenAPIAPIError404.h"
#include "OpenAPIAPIError429.h"
#include "OpenAPIAPIError500.h"
#include "OpenAPIAPIError501.h"
#include "OpenAPIBidResult.h"
#include "OpenAPICancelOrdersRequestBody.h"
#include "OpenAPICancelOrdersResult.h"
#include "OpenAPICollectionBidResult.h"
#include "OpenAPICreateBidRequestBody.h"
#include "OpenAPICreateCollectionBidRequestBody.h"
#include "OpenAPICreateListingRequestBody.h"
#include "OpenAPIFulfillmentData200Response.h"
#include "OpenAPIFulfillmentDataRequest.h"
#include "OpenAPIListBidsResult.h"
#include "OpenAPIListCollectionBidsResult.h"
#include "OpenAPIListListingsResult.h"
#include "OpenAPIListTradeResult.h"
#include "OpenAPIListingResult.h"
#include "OpenAPIOrderStatusName.h"
#include "OpenAPITradeResult.h"

namespace ImmutableOpenAPI
{

/* Cancel one or more orders
 *
 * Cancel one or more orders
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CancelOrdersRequest : public Request
{
public:
    virtual ~CancelOrdersRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	OpenAPICancelOrdersRequestBody OpenAPICancelOrdersRequestBody;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CancelOrdersResponse : public Response
{
public:
    virtual ~CancelOrdersResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICancelOrdersResult Content;
};

/* Create a bid
 *
 * Create a bid
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateBidRequest : public Request
{
public:
    virtual ~CreateBidRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	OpenAPICreateBidRequestBody OpenAPICreateBidRequestBody;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateBidResponse : public Response
{
public:
    virtual ~CreateBidResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBidResult Content;
};

/* Create a collection bid
 *
 * Create a collection bid
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateCollectionBidRequest : public Request
{
public:
    virtual ~CreateCollectionBidRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	OpenAPICreateCollectionBidRequestBody OpenAPICreateCollectionBidRequestBody;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateCollectionBidResponse : public Response
{
public:
    virtual ~CreateCollectionBidResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICollectionBidResult Content;
};

/* Create a listing
 *
 * Create a listing
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateListingRequest : public Request
{
public:
    virtual ~CreateListingRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	OpenAPICreateListingRequestBody OpenAPICreateListingRequestBody;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::CreateListingResponse : public Response
{
public:
    virtual ~CreateListingResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListingResult Content;
};

/* Retrieve fulfillment data for orders
 *
 * Retrieve signed fulfillment data based on the list of order IDs and corresponding fees.
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::FulfillmentDataRequest : public Request
{
public:
    virtual ~FulfillmentDataRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	TArray<OpenAPIFulfillmentDataRequest> OpenAPIFulfillmentDataRequest;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::FulfillmentDataResponse : public Response
{
public:
    virtual ~FulfillmentDataResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIFulfillmentData200Response Content;
};

/* Get a single bid by ID
 *
 * Get a single bid by ID
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetBidRequest : public Request
{
public:
    virtual ~GetBidRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Global Bid identifier */
	FGuid BidId;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetBidResponse : public Response
{
public:
    virtual ~GetBidResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIBidResult Content;
};

/* Get a single collection bid by ID
 *
 * Get a single collection bid by ID
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetCollectionBidRequest : public Request
{
public:
    virtual ~GetCollectionBidRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Global Collection Bid identifier */
	FGuid CollectionBidId;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetCollectionBidResponse : public Response
{
public:
    virtual ~GetCollectionBidResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPICollectionBidResult Content;
};

/* Get a single listing by ID
 *
 * Get a single listing by ID
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetListingRequest : public Request
{
public:
    virtual ~GetListingRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Global Order identifier */
	FGuid ListingId;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetListingResponse : public Response
{
public:
    virtual ~GetListingResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListingResult Content;
};

/* Get a single trade by ID
 *
 * Get a single trade by ID
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetTradeRequest : public Request
{
public:
    virtual ~GetTradeRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Global Trade identifier */
	FGuid TradeId;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::GetTradeResponse : public Response
{
public:
    virtual ~GetTradeResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPITradeResult Content;
};

/* List all bids
 *
 * List all bids
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListBidsRequest : public Request
{
public:
    virtual ~ListBidsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Order status to filter by */
	TOptional<OpenAPIOrderStatusName> Status;
	/* Buy item contract address to filter by */
	TOptional<FString> BuyItemContractAddress;
	/* Sell item contract address to filter by */
	TOptional<FString> SellItemContractAddress;
	/* The account address of the user who created the bid */
	TOptional<FString> AccountAddress;
	/* The metadata_id of the buy item */
	TOptional<FGuid> BuyItemMetadataId;
	/* buy item token identifier to filter by */
	TOptional<FString> BuyItemTokenId;
	/* From updated at including given date */
	TOptional<FDateTime> FromUpdatedAt;
	/* Maximum number of orders to return per page */
	TOptional<int32> PageSize;
	enum class SortByEnum
	{
		CreatedAt,
		UpdatedAt,
		SellItemAmount,
  	};

	static FString EnumToString(const SortByEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortByEnum& EnumValue);
	/* Order field to sort by. `sell_item_amount` sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, itâ€™s sorted as 2eth for `sell_item_amount`. */
	TOptional<SortByEnum> SortBy;
	enum class SortDirectionEnum
	{
		Asc,
		Desc,
  	};

	static FString EnumToString(const SortDirectionEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortDirectionEnum& EnumValue);
	/* Ascending or descending direction for sort */
	TOptional<SortDirectionEnum> SortDirection;
	/* Page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListBidsResponse : public Response
{
public:
    virtual ~ListBidsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListBidsResult Content;
};

/* List all collection bids
 *
 * List all collection bids
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListCollectionBidsRequest : public Request
{
public:
    virtual ~ListCollectionBidsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Order status to filter by */
	TOptional<OpenAPIOrderStatusName> Status;
	/* Buy item contract address to filter by */
	TOptional<FString> BuyItemContractAddress;
	/* Sell item contract address to filter by */
	TOptional<FString> SellItemContractAddress;
	/* The account address of the user who created the bid */
	TOptional<FString> AccountAddress;
	/* From updated at including given date */
	TOptional<FDateTime> FromUpdatedAt;
	/* Maximum number of orders to return per page */
	TOptional<int32> PageSize;
	enum class SortByEnum
	{
		CreatedAt,
		UpdatedAt,
		SellItemAmount,
  	};

	static FString EnumToString(const SortByEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortByEnum& EnumValue);
	/* Order field to sort by. `sell_item_amount` sorts by per token price, for example if 10eth is offered for 5 ERC1155 items, itâ€™s sorted as 2eth for `sell_item_amount`. */
	TOptional<SortByEnum> SortBy;
	enum class SortDirectionEnum
	{
		Asc,
		Desc,
  	};

	static FString EnumToString(const SortDirectionEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortDirectionEnum& EnumValue);
	/* Ascending or descending direction for sort */
	TOptional<SortDirectionEnum> SortDirection;
	/* Page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListCollectionBidsResponse : public Response
{
public:
    virtual ~ListCollectionBidsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListCollectionBidsResult Content;
};

/* List all listings
 *
 * List all listings
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListListingsRequest : public Request
{
public:
    virtual ~ListListingsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	/* Order status to filter by */
	TOptional<OpenAPIOrderStatusName> Status;
	/* Sell item contract address to filter by */
	TOptional<FString> SellItemContractAddress;
	enum class BuyItemTypeEnum
	{
		Native,
		ERC20,
  	};

	static FString EnumToString(const BuyItemTypeEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, BuyItemTypeEnum& EnumValue);
	/* Buy item type to filter by */
	TOptional<BuyItemTypeEnum> BuyItemType;
	/* Buy item contract address to filter by */
	TOptional<FString> BuyItemContractAddress;
	/* The account address of the user who created the listing */
	TOptional<FString> AccountAddress;
	/* The metadata_id of the sell item */
	TOptional<FGuid> SellItemMetadataId;
	/* Sell item token identifier to filter by */
	TOptional<FString> SellItemTokenId;
	/* From updated at including given date */
	TOptional<FDateTime> FromUpdatedAt;
	/* Maximum number of orders to return per page */
	TOptional<int32> PageSize;
	enum class SortByEnum
	{
		CreatedAt,
		UpdatedAt,
		BuyItemAmount,
  	};

	static FString EnumToString(const SortByEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortByEnum& EnumValue);
	/* Order field to sort by. `buy_item_amount` sorts by per token price, for example if 5 ERC-1155s are on sale for 10eth, itâ€™s sorted as 2eth for `buy_item_amount`. */
	TOptional<SortByEnum> SortBy;
	enum class SortDirectionEnum
	{
		Asc,
		Desc,
  	};

	static FString EnumToString(const SortDirectionEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortDirectionEnum& EnumValue);
	/* Ascending or descending direction for sort */
	TOptional<SortDirectionEnum> SortDirection;
	/* Page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListListingsResponse : public Response
{
public:
    virtual ~ListListingsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListListingsResult Content;
};

/* List all trades
 *
 * List all trades
*/
class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListTradesRequest : public Request
{
public:
    virtual ~ListTradesRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	FString ChainName;
	TOptional<FString> AccountAddress;
	TOptional<FString> SellItemContractAddress;
	/* From indexed at including given date */
	TOptional<FDateTime> FromIndexedAt;
	/* Maximum number of trades to return per page */
	TOptional<int32> PageSize;
	enum class SortByEnum
	{
		IndexedAt,
  	};

	static FString EnumToString(const SortByEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortByEnum& EnumValue);
	/* Trade field to sort by */
	TOptional<SortByEnum> SortBy;
	enum class SortDirectionEnum
	{
		Asc,
		Desc,
  	};

	static FString EnumToString(const SortDirectionEnum& EnumValue);
	static bool EnumFromString(const FString& EnumAsString, SortDirectionEnum& EnumValue);
	/* Ascending or descending direction for sort */
	TOptional<SortDirectionEnum> SortDirection;
	/* Page cursor to retrieve previous or next page. Use the value returned in the response. */
	TOptional<FString> PageCursor;
};

class IMMUTABLEOPENAPI_API OpenAPIOrdersApi::ListTradesResponse : public Response
{
public:
    virtual ~ListTradesResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIListTradeResult Content;
};

}
