/**
 * TS SDK API
 * running ts sdk as an api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "ImmutableTsSdkApi_DefaultApiOperations.h"

#include "ImmutableTsSdkApiModule.h"
#include "ImmutableTsSdkApi_Helpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace ImmutableTsSdkApi
{

FString ImmutableTsSdkApi_DefaultApi::V1HeartbeatGetRequest::ComputePath() const
{
	FString Path(TEXT("/v1/heartbeat"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1HeartbeatGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void ImmutableTsSdkApi_DefaultApi::V1HeartbeatGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("heartbeat"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1HeartbeatGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1HeartbeatHeadRequest::ComputePath() const
{
	FString Path(TEXT("/v1/heartbeat"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1HeartbeatHeadRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("HEAD"));

}

void ImmutableTsSdkApi_DefaultApi::V1HeartbeatHeadResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("heartbeat"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1HeartbeatHeadResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersOnChainPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/cancelOrdersOnChain"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersOnChainPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookCancelOrdersOnChainPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookCancelOrdersOnChainPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCancelOrdersOnChainPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCancelOrdersOnChainPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersOnChainPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response schema for the cancelOrder endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersOnChainPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/cancelOrders"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookCancelOrdersPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookCancelOrdersPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCancelOrdersPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCancelOrdersPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response schema for the cancelOrder endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCancelOrdersPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCreateListingPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/createListing"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCreateListingPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookCreateListingPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookCreateListingPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCreateListingPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookCreateListingPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCreateListingPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("The response schema for the create listing endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookCreateListingPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookFulfillOrderPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/fulfillOrder"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookFulfillOrderPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookFulfillOrderPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookFulfillOrderPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookFulfillOrderPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookFulfillOrderPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookFulfillOrderPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response schema for the fulfillOrder endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookFulfillOrderPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareListingPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/prepareListing"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareListingPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookPrepareListingPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookPrepareListingPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookPrepareListingPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookPrepareListingPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareListingPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response schema for the prepareListing endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareListingPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareOrderCancellationsPostRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/orderbook/prepareOrderCancellations"));
	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareOrderCancellationsPostRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (ImmutableTsSdkApiV1TsSdkOrderbookPrepareOrderCancellationsPostRequest.IsSet())
		{
			WriteJsonValue(Writer, ImmutableTsSdkApiV1TsSdkOrderbookPrepareOrderCancellationsPostRequest.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookPrepareOrderCancellationsPostRequest) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Body parameter (ImmutableTsSdkApi_V1TsSdkOrderbookPrepareOrderCancellationsPostRequest) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareOrderCancellationsPostResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Response schema for the prepareOrderCancellations endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkOrderbookPrepareOrderCancellationsPostResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceGetRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/token/balance"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("wallet_address=")) + ToUrlString(WalletAddress));
	QueryParams.Add(FString(TEXT("contract_address=")) + ToUrlString(ContractAddress));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceGetRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceGetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("The response body returned from get balance endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceGetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceHeadRequest::ComputePath() const
{
	FString Path(TEXT("/v1/ts-sdk/token/balance"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("wallet_address=")) + ToUrlString(WalletAddress));
	QueryParams.Add(FString(TEXT("contract_address=")) + ToUrlString(ContractAddress));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceHeadRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("HEAD"));

}

void ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceHeadResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("The response body returned from get balance endpoint"));
		break;
	}
}

bool ImmutableTsSdkApi_DefaultApi::V1TsSdkTokenBalanceHeadResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
