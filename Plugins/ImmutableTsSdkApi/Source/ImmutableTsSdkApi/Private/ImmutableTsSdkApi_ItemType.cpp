/**
 * TS SDK API
 * running ts sdk as an api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "ImmutableTsSdkApi_ItemType.h"

#include "ImmutableTsSdkApiModule.h"
#include "ImmutableTsSdkApi_Helpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutableTsSdkApi
{

inline FString ToString(const ImmutableTsSdkApi_ItemType::Values& Value)
{
	switch (Value)
	{
	case ImmutableTsSdkApi_ItemType::Values::_0:
		return TEXT("0");
	case ImmutableTsSdkApi_ItemType::Values::_1:
		return TEXT("1");
	case ImmutableTsSdkApi_ItemType::Values::_2:
		return TEXT("2");
	case ImmutableTsSdkApi_ItemType::Values::_3:
		return TEXT("3");
	case ImmutableTsSdkApi_ItemType::Values::_4:
		return TEXT("4");
	case ImmutableTsSdkApi_ItemType::Values::_5:
		return TEXT("5");
	}

	UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Invalid ImmutableTsSdkApi_ItemType::Values Value (%d)"), (int)Value);
	return TEXT("");
}

FString ImmutableTsSdkApi_ItemType::EnumToString(const ImmutableTsSdkApi_ItemType::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, ImmutableTsSdkApi_ItemType::Values& Value)
{
	static TMap<FString, ImmutableTsSdkApi_ItemType::Values> StringToEnum = { 
		{ TEXT("0"), ImmutableTsSdkApi_ItemType::Values::_0 },
		{ TEXT("1"), ImmutableTsSdkApi_ItemType::Values::_1 },
		{ TEXT("2"), ImmutableTsSdkApi_ItemType::Values::_2 },
		{ TEXT("3"), ImmutableTsSdkApi_ItemType::Values::_3 },
		{ TEXT("4"), ImmutableTsSdkApi_ItemType::Values::_4 },
		{ TEXT("5"), ImmutableTsSdkApi_ItemType::Values::_5 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool ImmutableTsSdkApi_ItemType::EnumFromString(const FString& EnumAsString, ImmutableTsSdkApi_ItemType::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const ImmutableTsSdkApi_ItemType::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, ImmutableTsSdkApi_ItemType::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void ImmutableTsSdkApi_ItemType::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteObjectEnd();
}

bool ImmutableTsSdkApi_ItemType::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;


	return ParseSuccess;
}

}
