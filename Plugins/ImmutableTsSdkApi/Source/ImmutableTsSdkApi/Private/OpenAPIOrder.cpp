/**
 * TS SDK API
 * running ts sdk as an api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIOrder.h"

#include "ImmutableTsSdkApiModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace ImmutableTsSdkApi
{

inline FString ToString(const OpenAPIOrder::TypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIOrder::TypeEnum::Listing:
		return TEXT("LISTING");
	}

	UE_LOG(LogImmutableTsSdkApi, Error, TEXT("Invalid OpenAPIOrder::TypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIOrder::EnumToString(const OpenAPIOrder::TypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIOrder::TypeEnum& Value)
{
	static TMap<FString, OpenAPIOrder::TypeEnum> StringToEnum = { 
		{ TEXT("LISTING"), OpenAPIOrder::TypeEnum::Listing }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIOrder::EnumFromString(const FString& EnumAsString, OpenAPIOrder::TypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIOrder::TypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIOrder::TypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIOrder::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (AccountAddress.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("accountAddress")); WriteJsonValue(Writer, AccountAddress.GetValue());
	}
	if (Buy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("buy")); WriteJsonValue(Writer, Buy.GetValue());
	}
	if (Chain.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("chain")); WriteJsonValue(Writer, Chain.GetValue());
	}
	if (CreatedAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("createdAt")); WriteJsonValue(Writer, CreatedAt.GetValue());
	}
	if (EndAt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("endAt")); WriteJsonValue(Writer, EndAt.GetValue());
	}
	if (Fees.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fees")); WriteJsonValue(Writer, Fees.GetValue());
	}
	if (FillStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fillStatus")); WriteJsonValue(Writer, FillStatus.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id);
	Writer->WriteIdentifierPrefix(TEXT("orderHash")); WriteJsonValue(Writer, OrderHash);
	if (ProtocolData.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("protocolData")); WriteJsonValue(Writer, ProtocolData.GetValue());
	}
	if (Salt.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("salt")); WriteJsonValue(Writer, Salt.GetValue());
	}
	Writer->WriteIdentifierPrefix(TEXT("sell")); WriteJsonValue(Writer, Sell);
	Writer->WriteIdentifierPrefix(TEXT("signature")); WriteJsonValue(Writer, Signature);
	Writer->WriteIdentifierPrefix(TEXT("startAt")); WriteJsonValue(Writer, StartAt);
	Writer->WriteIdentifierPrefix(TEXT("status")); WriteJsonValue(Writer, Status);
	Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type);
	Writer->WriteIdentifierPrefix(TEXT("updatedAt")); WriteJsonValue(Writer, UpdatedAt);
	Writer->WriteObjectEnd();
}

bool OpenAPIOrder::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("accountAddress"), AccountAddress);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("buy"), Buy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("chain"), Chain);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("createdAt"), CreatedAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("endAt"), EndAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fees"), Fees);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fillStatus"), FillStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("orderHash"), OrderHash);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("protocolData"), ProtocolData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("salt"), Salt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sell"), Sell);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("signature"), Signature);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("startAt"), StartAt);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("status"), Status);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("updatedAt"), UpdatedAt);

	return ParseSuccess;
}

}
