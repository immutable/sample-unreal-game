/**
 * TS SDK API
 * running ts sdk as an api
 *
 * OpenAPI spec version: 1.0.0
 * Contact: contact@immutable.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "CoreMinimal.h"
#include "ImmutableTsSdkApi_BaseModel.h"

namespace ImmutableTsSdkApi
{

class IMMUTABLETSSDKAPI_API ImmutableTsSdkApi_DefaultApi
{
public:
	ImmutableTsSdkApi_DefaultApi();
	~ImmutableTsSdkApi_DefaultApi();

	/* Sets the URL Endpoint.
	* Note: several fallback endpoints can be configured in request retry policies, see Request::SetShouldRetry */
	void SetURL(const FString& Url);

	/* Adds global header params to all requests */
	void AddHeaderParam(const FString& Key, const FString& Value);
	void ClearHeaderParams();

	/* Sets the retry manager to the user-defined retry manager. User must manage the lifetime of the retry manager.
	* If no retry manager is specified and a request needs retries, a default retry manager will be used.
	* See also: Request::SetShouldRetry */
	void SetHttpRetryManager(FHttpRetrySystem::FManager& RetryManager);
	FHttpRetrySystem::FManager& GetHttpRetryManager();

	class V1HeartbeatGetRequest;
	class V1HeartbeatGetResponse;
	class V1HeartbeatHeadRequest;
	class V1HeartbeatHeadResponse;
	class V1TsSdkOrderbookCancelOrdersOnChainPostRequest;
	class V1TsSdkOrderbookCancelOrdersOnChainPostResponse;
	class V1TsSdkOrderbookCancelOrdersPostRequest;
	class V1TsSdkOrderbookCancelOrdersPostResponse;
	class V1TsSdkOrderbookCreateListingPostRequest;
	class V1TsSdkOrderbookCreateListingPostResponse;
	class V1TsSdkOrderbookFulfillOrderPostRequest;
	class V1TsSdkOrderbookFulfillOrderPostResponse;
	class V1TsSdkOrderbookPrepareListingPostRequest;
	class V1TsSdkOrderbookPrepareListingPostResponse;
	class V1TsSdkOrderbookPrepareOrderCancellationsPostRequest;
	class V1TsSdkOrderbookPrepareOrderCancellationsPostResponse;
	class V1TsSdkTokenBalanceGetRequest;
	class V1TsSdkTokenBalanceGetResponse;
	class V1TsSdkTokenBalanceHeadRequest;
	class V1TsSdkTokenBalanceHeadResponse;
	
    DECLARE_DELEGATE_OneParam(FV1HeartbeatGetDelegate, const V1HeartbeatGetResponse&);
    DECLARE_DELEGATE_OneParam(FV1HeartbeatHeadDelegate, const V1HeartbeatHeadResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookCancelOrdersOnChainPostDelegate, const V1TsSdkOrderbookCancelOrdersOnChainPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookCancelOrdersPostDelegate, const V1TsSdkOrderbookCancelOrdersPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookCreateListingPostDelegate, const V1TsSdkOrderbookCreateListingPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookFulfillOrderPostDelegate, const V1TsSdkOrderbookFulfillOrderPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookPrepareListingPostDelegate, const V1TsSdkOrderbookPrepareListingPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkOrderbookPrepareOrderCancellationsPostDelegate, const V1TsSdkOrderbookPrepareOrderCancellationsPostResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkTokenBalanceGetDelegate, const V1TsSdkTokenBalanceGetResponse&);
    DECLARE_DELEGATE_OneParam(FV1TsSdkTokenBalanceHeadDelegate, const V1TsSdkTokenBalanceHeadResponse&);
    
    FHttpRequestPtr V1HeartbeatGet(const V1HeartbeatGetRequest& Request, const FV1HeartbeatGetDelegate& Delegate = FV1HeartbeatGetDelegate()) const;
    FHttpRequestPtr V1HeartbeatHead(const V1HeartbeatHeadRequest& Request, const FV1HeartbeatHeadDelegate& Delegate = FV1HeartbeatHeadDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookCancelOrdersOnChainPost(const V1TsSdkOrderbookCancelOrdersOnChainPostRequest& Request, const FV1TsSdkOrderbookCancelOrdersOnChainPostDelegate& Delegate = FV1TsSdkOrderbookCancelOrdersOnChainPostDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookCancelOrdersPost(const V1TsSdkOrderbookCancelOrdersPostRequest& Request, const FV1TsSdkOrderbookCancelOrdersPostDelegate& Delegate = FV1TsSdkOrderbookCancelOrdersPostDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookCreateListingPost(const V1TsSdkOrderbookCreateListingPostRequest& Request, const FV1TsSdkOrderbookCreateListingPostDelegate& Delegate = FV1TsSdkOrderbookCreateListingPostDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookFulfillOrderPost(const V1TsSdkOrderbookFulfillOrderPostRequest& Request, const FV1TsSdkOrderbookFulfillOrderPostDelegate& Delegate = FV1TsSdkOrderbookFulfillOrderPostDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookPrepareListingPost(const V1TsSdkOrderbookPrepareListingPostRequest& Request, const FV1TsSdkOrderbookPrepareListingPostDelegate& Delegate = FV1TsSdkOrderbookPrepareListingPostDelegate()) const;
    FHttpRequestPtr V1TsSdkOrderbookPrepareOrderCancellationsPost(const V1TsSdkOrderbookPrepareOrderCancellationsPostRequest& Request, const FV1TsSdkOrderbookPrepareOrderCancellationsPostDelegate& Delegate = FV1TsSdkOrderbookPrepareOrderCancellationsPostDelegate()) const;
    FHttpRequestPtr V1TsSdkTokenBalanceGet(const V1TsSdkTokenBalanceGetRequest& Request, const FV1TsSdkTokenBalanceGetDelegate& Delegate = FV1TsSdkTokenBalanceGetDelegate()) const;
    FHttpRequestPtr V1TsSdkTokenBalanceHead(const V1TsSdkTokenBalanceHeadRequest& Request, const FV1TsSdkTokenBalanceHeadDelegate& Delegate = FV1TsSdkTokenBalanceHeadDelegate()) const;
    
private:
    void OnV1HeartbeatGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1HeartbeatGetDelegate Delegate) const;
    void OnV1HeartbeatHeadResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1HeartbeatHeadDelegate Delegate) const;
    void OnV1TsSdkOrderbookCancelOrdersOnChainPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookCancelOrdersOnChainPostDelegate Delegate) const;
    void OnV1TsSdkOrderbookCancelOrdersPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookCancelOrdersPostDelegate Delegate) const;
    void OnV1TsSdkOrderbookCreateListingPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookCreateListingPostDelegate Delegate) const;
    void OnV1TsSdkOrderbookFulfillOrderPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookFulfillOrderPostDelegate Delegate) const;
    void OnV1TsSdkOrderbookPrepareListingPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookPrepareListingPostDelegate Delegate) const;
    void OnV1TsSdkOrderbookPrepareOrderCancellationsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkOrderbookPrepareOrderCancellationsPostDelegate Delegate) const;
    void OnV1TsSdkTokenBalanceGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkTokenBalanceGetDelegate Delegate) const;
    void OnV1TsSdkTokenBalanceHeadResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FV1TsSdkTokenBalanceHeadDelegate Delegate) const;
    
	FHttpRequestRef CreateHttpRequest(const Request& Request) const;
	bool IsValid() const;
	void HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const;

	FString Url;
	TMap<FString,FString> AdditionalHeaderParams;
	mutable FHttpRetrySystem::FManager* RetryManager = nullptr;
	mutable TUniquePtr<HttpRetryManager> DefaultRetryManager;
};

}
